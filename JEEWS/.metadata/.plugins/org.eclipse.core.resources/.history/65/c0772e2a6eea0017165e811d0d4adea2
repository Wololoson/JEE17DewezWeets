package be.gestionhopital.CRUD;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.Status;

import be.gestionhopital.Connexion.DriverACCESS;

@Path("personne")
public class PersonneCRUD {
	private Connection conn = DriverACCESS.getInstance();
	
	@GET
	@Produces(MediaType.TEXT_XML)
	public Response getPersonnes() throws SQLException {
		CallableStatement getPers = null;
		ResultSet results = null;
		String retour = "<?xml version=\"1.0\"?>";
		
		retour += "<listePersonne>";
		
		try{
			getPers = conn.prepareCall("{ ? = call SelectAll.getPersonnes() }");
			getPers.registerOutParameter(1, Types.OTHER);
			getPers.execute();
			results = (ResultSet)getPers.getObject(1);
			while(results.next()) {
				retour += "<personne>";
				retour += "<id>"+results.getDouble("IdPersonne")+"</id>";
				retour += "<nom>"+results.getString("Nom")+"</nom>";
				retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
				retour += "<dateNaissance>"+results.getDate("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "</personne>";
			}
			results.close();
			getPers.close();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getPers != null)
				getPers.close();
		}
		
		retour += "</listePersonne>";
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@GET
	@Path("{id}")
	@Produces(MediaType.TEXT_XML)
	public Response getPersonne() throws SQLException {
		String retour = "";
		CallableStatement getPers = null;
		ResultSet results = null;
		
		try {
			getPers = conn.prepareCall("{ ? = call SelectOne.getPersonne()}");
			getPers.registerOutParameter(1, Types.OTHER);
			getPers.execute();
			results = (ResultSet)getPers.getObject(1);
			if(results.next()) {
				retour += "<personne>";
				retour += "<id>"+results.getDouble("IdPersonne")+"</id>";
				retour += "<nom>"+results.getString("Nom")+"</nom>";
				retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
				retour += "<dateNaissance>"+results.getDate("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "</personne>";
			}
			
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getPers != null)
				getPers.close();
		}
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@POST
	public void insertPersonne(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") Date dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp) throws SQLException {
		CallableStatement insertPers = null;
		
		try {
			insertPers = conn.prepareCall("{call Inserts.insertPersonne(?,?,?,?,?)}");
			insertPers.setString(1, nom);
			insertPers.setString(2, prenom);
			insertPers.setDate(3, dateNaiss);
			insertPers.setString(4, numTel);
			insertPers.setString(5, mdp);
			insertPers.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(insertPers != null)
				insertPers.close();
		}
	}
	
	@PUT
	public void updatePersonne(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") Date dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp) throws SQLException {
		CallableStatement updatePers = null;
		
		try {
			updatePers = conn.prepareCall("{call Updates.updatePersonne(?,?,?,?,?)}");
			updatePers.setString(1, nom);
			updatePers.setString(2, prenom);
			updatePers.setDate(3, dateNaiss);
			updatePers.setString(4, numTel);
			updatePers.setString(5, mdp);
			updatePers.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(updatePers != null)
				updatePers.close();
		}
	}
	
	@DELETE
	public void deletePersonne(@FormParam("id") int id) throws SQLException {
CallableStatement updatePers = null;
		
		try {
			updatePers = conn.prepareCall("{call Updates.updatePersonne(?)}");
			updatePers.setDouble(1, id);
			updatePers.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(updatePers != null)
				updatePers.close();
		}
	}
}
