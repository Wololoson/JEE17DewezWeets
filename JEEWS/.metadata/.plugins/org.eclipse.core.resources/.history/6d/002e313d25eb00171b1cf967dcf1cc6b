package be.gestionhopital.CRUD;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import be.gestionhopital.Connexion.DriverACCESS;

@Path("notification")
public class NotificationCRUD {
	private Connection conn = DriverACCESS.getInstance();
	
	@GET
	@Produces(MediaType.TEXT_XML)
	public Response getNotifications() throws SQLException {
		CallableStatement getNotif = null;
		ResultSet results = null;
		String retour = "<?xml version=\"1.0\"?>";
		
		retour += "<listeNotifications>";
		
		try{
			getNotif = conn.prepareCall("{ ? = call SelectAll.getNotifications() }");
			getNotif.registerOutParameter(1, Types.OTHER);
			getNotif.execute();
			results = (ResultSet)getNotif.getObject(1);
			while(results.next()) {
				retour += "<notification>";
				retour += "<id>"+results.getDouble("IdNotification")+"</id>";
				retour += "<priorite>"+results.getString("Priorite")+"</priorite>";
				retour += "<type>"+results.getString("Type_Notification")+"</type>";
				retour += "<dateNaissance>"+results.getDate("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "<specialisation>"+results.getString("Specialisation")+"</specialisation>";
				retour += "</notification>";
			}
			results.close();
			getNotif.close();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getNotif != null)
				getNotif.close();
		}
		
		retour += "</listeNotifications>";
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@POST
	public void insertChirurgien(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") Date dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp, @FormParam("spec") String spec) throws SQLException {
		CallableStatement insertChir = null;
		
		try {
			insertChir = conn.prepareCall("{call Inserts.insertChirurgien(?,?,?,?,?,?)}");
			insertChir.setString(1, nom);
			insertChir.setString(2, prenom);
			insertChir.setDate(3, dateNaiss);
			insertChir.setString(4, numTel);
			insertChir.setString(5, mdp);
			insertChir.setString(6, spec);
			insertChir.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(insertChir != null)
				insertChir.close();
		}
	}
	
	@DELETE
	public void deleteChirurgien(@FormParam("id") int id) throws SQLException {
		CallableStatement deleteDire = null;
		
		try {
			deleteDire = conn.prepareCall("{call Deletes.deleteChirurgien(?)}");
			deleteDire.setDouble(1, id);
			deleteDire.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(deleteDire != null)
				deleteDire.close();
		}
	}
}
