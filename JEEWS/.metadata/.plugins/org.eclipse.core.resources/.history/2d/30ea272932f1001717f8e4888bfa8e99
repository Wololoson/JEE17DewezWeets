package be.gestionhopital.CRUD;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import be.gestionhopital.Connexion.DriverACCESS;
import oracle.jdbc.internal.OracleTypes;

@Path("chirurgien")
public class ChirurgienCRUD {
	private Connection conn = DriverACCESS.getInstance();
	
	public ChirurgienCRUD() {}
	
	@GET
	@Produces(MediaType.TEXT_XML)
	public Response getChirurgiens() throws SQLException {
		CallableStatement getChir = null;
		ResultSet results = null;
		String retour = "<?xml version=\"1.0\"?>";
		
		retour += "<listeChirurgiens>";
		
		try{
			getChir = conn.prepareCall("{ ? = call SelectAll.getChirurgiens }");
			getChir.registerOutParameter(1, OracleTypes.CURSOR); 
			getChir.execute();
			if((results = (ResultSet)getChir.getObject(1)) != null) {
				while(results.next()) {
					retour += "<chirurgien>";
					retour += "<id>"+results.getInt("IdPersonne")+"</id>";
					retour += "<nom>"+results.getString("Nom")+"</nom>";
					retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
					retour += "<dateNaissance>"+results.getString("DateNaissance")+"</dateNaissance>";
					retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
					retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
					retour += "<specialisation>"+results.getString("Specialisation")+"</specialisation>";
					retour += "</chirurgien>";
				}
				results.close();
			}
			getChir.close();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getChir != null)
				getChir.close();
		}
		
		retour += "</listeChirurgiens>";
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@GET
	@Path("{id}")
	@Produces(MediaType.TEXT_XML)
	public Response getChirurgien(@PathParam("id") int id) throws SQLException {
		String retour = "";
		CallableStatement getChir = null;
		ResultSet results = null;
		
		try {
			getChir = conn.prepareCall("{ ? = call SelectOne.getChirurgien(?)}");
			getChir.registerOutParameter(1, OracleTypes.CURSOR);
			getChir.setDouble(2, id);
			getChir.execute();
			results = (ResultSet)getChir.getObject(1);
			if(results.next()) {
				retour += "<chirurgien>";
				retour += "<id>"+results.getInt("IdPersonne")+"</id>";
				retour += "<nom>"+results.getString("Nom")+"</nom>";
				retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
				retour += "<dateNaissance>"+results.getString("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "<specialisation>"+results.getString("Specialisation")+"</specialisation>";
				retour += "</chirurgien>";
			}
			results.close();
			getChir.close();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getChir != null)
				getChir.close();
		}
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@POST
	public Response insertChirurgien(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") String dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp, @FormParam("spec") String spec) throws SQLException {
		CallableStatement insertChir = null;
		ResultSet results = null;
		String id = null;
		
		try {
			insertChir = conn.prepareCall("{? = call Inserts.insertChirurgien(?,?,?,?,?,?)}");
			insertChir.registerOutParameter(1, OracleTypes.CURSOR);
			insertChir.setString(2, nom);
			insertChir.setString(3, prenom);
			insertChir.setString(4, Date.valueOf(dateNaiss));
			insertChir.setString(5, numTel);
			insertChir.setString(6, mdp);
			insertChir.setString(7, spec);
			insertChir.executeUpdate();

			results = (ResultSet)insertChir.getObject(1);
			if(results.next()) {
				id = Integer.toString(results.getInt("IdPersonne"));
			}
			
			return Response.status(200).entity(id).build();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(insertChir != null)
				insertChir.close();
		}
		return Response.status(500).entity("ERROR").build();
	}
	
	@PUT
	public void updateChirurgien(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") String dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp, @FormParam("spec") String spec) throws SQLException {
		CallableStatement updateChir = null;
		
		try {
			updateChir = conn.prepareCall("{call Updates.updateChirurgien(?,?,?,?,?,?)}");
			updateChir.setString(1, nom);
			updateChir.setString(2, prenom);
			updateChir.setDate(3, Date.valueOf(dateNaiss));
			updateChir.setString(4, numTel);
			updateChir.setString(5, mdp);
			updateChir.setString(6, spec);
			updateChir.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(updateChir != null)
				updateChir.close();
		}
	}
	
	@DELETE
	public void deleteChirurgien(@FormParam("id") int id) throws SQLException {
		CallableStatement deleteDire = null;
		
		try {
			deleteDire = conn.prepareCall("{call Deletes.deleteChirurgien(?)}");
			deleteDire.setDouble(1, id);
			deleteDire.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(deleteDire != null)
				deleteDire.close();
		}
	}
}
