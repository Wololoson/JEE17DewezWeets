package be.gestionhopital.CRUD;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import be.gestionhopital.Connexion.DriverACCESS;

@Path("patient")
public class PatientCRUD {
	private Connection conn = DriverACCESS.getInstance();
	
	@GET
	@Produces(MediaType.TEXT_XML)
	public Response getPatients() throws SQLException {
		CallableStatement getPati = null;
		ResultSet results = null;
		String retour = "<?xml version=\"1.0\"?>";
		
		retour += "<listePatients>";
		
		try{
			getPati = conn.prepareCall("{ ? = call SelectAll.getPatients() }");
			getPati.registerOutParameter(1, Types.OTHER);
			getPati.execute();
			results = (ResultSet)getPati.getObject(1);
			while(results.next()) {
				retour += "<patient>";
				retour += "<id>"+results.getDouble("IdPersonne")+"</id>";
				retour += "<nom>"+results.getString("Nom")+"</nom>";
				retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
				retour += "<dateNaissance>"+results.getDate("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "<numeroChambre>"+results.getString("NumeroChambre")+"</numeroChambre>";
				retour += "<numeroPatient>"+results.getString("NumeroPatient")+"</numeroPatient>";
				retour += "</patient>";
			}
			results.close();
			getPati.close();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getPati != null)
				getPati.close();
		}
		
		retour += "</listePatients>";
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@GET
	@Path("{id}")
	@Produces(MediaType.TEXT_XML)
	public Response getPatient() throws SQLException {
		String retour = "";
		CallableStatement getPati = null;
		ResultSet results = null;
		
		try {
			getPati = conn.prepareCall("{ ? = call SelectOne.getPatient()}");
			getPati.registerOutParameter(1, Types.OTHER);
			getPati.execute();
			results = (ResultSet)getPati.getObject(1);
			if(results.next()) {
				retour += "<patient>";
				retour += "<id>"+results.getDouble("IdPersonne")+"</id>";
				retour += "<nom>"+results.getString("Nom")+"</nom>";
				retour += "<prenom>"+results.getString("Prenom")+"</prenom>";
				retour += "<dateNaissance>"+results.getDate("DateNaissance")+"</dateNaissance>";
				retour += "<numTelephone>"+results.getString("NumeroTelephone")+"</numTelephone>";
				retour += "<motDePasse>"+results.getString("MotDePasse")+"</motDePasse>";
				retour += "<numeroChambre>"+results.getString("NumeroChambre")+"</numeroChambre>";
				retour += "<numeroPatient>"+results.getString("NumeroPatient")+"</numeroPatient>";
				retour += "</patient>";
			}
			
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(results != null)
				results.close();
			if(getPati != null)
				getPati.close();
		}
		
		return Response.status(Status.OK).entity(retour).build();
	}
	
	@POST
	public void insertPatient(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") Date dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp, @FormParam("numCh") String numCh, @FormParam("numPa") String numPa) throws SQLException {
		CallableStatement insertPati = null;
		
		try {
			insertPati = conn.prepareCall("{call Inserts.insertSecretaire(?,?,?,?,?,?,?)}");
			insertPati.setString(1, nom);
			insertPati.setString(2, prenom);
			insertPati.setDate(3, dateNaiss);
			insertPati.setString(4, numTel);
			insertPati.setString(5, mdp);
			insertPati.setString(6, numCh);
			insertPati.setString(7, numPa);
			insertPati.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(insertPati != null)
				insertPati.close();
		}
	}
	
	@PUT
	public void updateSecretaire(@FormParam("nom") String nom, @FormParam("prenom") String prenom, @FormParam("dateNaiss") Date dateNaiss, @FormParam("numTel") String numTel, @FormParam("mdp") String mdp, @FormParam("numCh") String numCh, @FormParam("numPa") String numPa) throws SQLException {
		CallableStatement updateSecr = null;
		
		try {
			updateSecr = conn.prepareCall("{call Updates.updateSecretaire(?,?,?,?,?)}");
			updateSecr.setString(1, nom);
			updateSecr.setString(2, prenom);
			updateSecr.setDate(3, dateNaiss);
			updateSecr.setString(4, numTel);
			updateSecr.setString(5, mdp);
			updateSecr.setString(6, service);
			updateSecr.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(updateSecr != null)
				updateSecr.close();
		}
	}
	
	@DELETE
	public void deleteSecretaire(@FormParam("id") int id) throws SQLException {
		CallableStatement deleteSecr = null;
		
		try {
			deleteSecr = conn.prepareCall("{call Deletes.deleteSecretaire(?)}");
			deleteSecr.setDouble(1, id);
			deleteSecr.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			if(deleteSecr != null)
				deleteSecr.close();
		}
	}
}
