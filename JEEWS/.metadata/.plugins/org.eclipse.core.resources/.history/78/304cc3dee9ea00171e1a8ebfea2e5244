package be.gestionhopital.DAO;

import java.io.IOException;
import java.io.StringReader;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.MediaType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.CharacterData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.sun.jersey.api.client.WebResource;

import be.gestionhopital.Models.Chirurgien;
import be.gestionhopital.Models.Personne;

public class DAOChirurgien extends DAO<Chirurgien> {
	public DAOChirurgien(WebResource conn) {
		super(conn);
	}

	@Override
	public boolean create(Chirurgien obj) {
		return false;
	}

	@Override
	public boolean delete(Chirurgien obj) {
		return false;
	}

	@Override
	public boolean update(Chirurgien obj) {
		return false;
	}

	@Override
	public Chirurgien find(Chirurgien obj) {
		return null;
	}
	
	public List<Chirurgien> findAll(Chirurgien obj) throws ParserConfigurationException, SAXException, IOException{
		List<Chirurgien> listChir = new ArrayList<>();
		String nom = null, prenom = null, numTel = null, mdp = null, specialisation = null;
		int id = 0;
		Date dateNaiss = null;
		String responseText = connect.path("personne").accept(MediaType.TEXT_XML).get(String.class);
		
		DocumentBuilder db = null;
		try {
			db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		} catch (Exception e) {
			e.printStackTrace();
		}
		InputSource is = new InputSource();
		is.setCharacterStream(new StringReader(responseText));

		Document doc = db.parse(is);
		NodeList listPersonnesNodes = doc.getElementsByTagName("listePersonne");
		
		for(int i = 0; i < listPersonnesNodes.getLength(); i++) {
			Element pers = (Element) listPersonnesNodes.item(i);
			
			NodeList personneNodes = pers.getElementsByTagName("personne");
			
			for(int j = 0; j < personneNodes.getLength(); j++) {
				Element personne = (Element) personneNodes.item(j);
				
				NodeList idNode = personne.getElementsByTagName("id");
				Element line = (Element) idNode.item(0);
				id = Integer.parseInt(getCharacterDataFromElement(line));
				
				NodeList nomNode = personne.getElementsByTagName("nom");
				line = (Element) nomNode.item(0);
				nom = getCharacterDataFromElement(line);
				
				NodeList prenomNode = personne.getElementsByTagName("prenom");
				line = (Element) prenomNode.item(0);
				prenom = getCharacterDataFromElement(line);
				
				NodeList numTelNode = personne.getElementsByTagName("numTelephone");
				line = (Element) numTelNode.item(0);
				numTel = getCharacterDataFromElement(line);
				
				NodeList mdpNode = personne.getElementsByTagName("motDePasse");
				line = (Element) mdpNode.item(0);
				mdp = getCharacterDataFromElement(line);
				
				NodeList dateNaissNode = personne.getElementsByTagName("dateNaissance");
				line = (Element) dateNaissNode.item(0);
				dateNaiss = Date.valueOf(getCharacterDataFromElement(line));
			}
		}
		
		return null;
	}
	
	public static String getCharacterDataFromElement(Element e) {
	    Node child = e.getFirstChild();
	    if (child instanceof CharacterData) {
	      CharacterData cd = (CharacterData) child;
	      return cd.getData();
	    }
	    return "";
	  }
}
